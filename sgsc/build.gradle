buildscript {
    ext {
        verJwt = "4.4.0"
        verOpenCsv = "5.9"
        verShedLock = "5.10.2"
        verLombok = "1.18.28"
        verSwagger = "2.2.0"
        verQuerydsl = "5.0.0"
    }
}

plugins {
    id "org.springframework.boot" version "3.2.1"
    id "io.spring.dependency-management" version "1.1.3"
    id "java-library"
    id "java"
}

group = "app"
version = "0.0.1"
sourceCompatibility = "17"

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    runtimeOnly("org.mariadb.jdbc:mariadb-java-client")
    implementation("com.auth0:java-jwt:${verJwt}")
    implementation("com.opencsv:opencsv:${verOpenCsv}")
    implementation("net.javacrumbs.shedlock:shedlock-spring:${verShedLock}")
    implementation("net.javacrumbs.shedlock:shedlock-provider-jdbc-template:${verShedLock}")
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:${verSwagger}")
    implementation("com.querydsl:querydsl-jpa:${verQuerydsl}:jakarta")
    annotationProcessor("com.querydsl:querydsl-apt:${verQuerydsl}:jakarta")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")

    implementation("org.projectlombok:lombok:${verLombok}")
    annotationProcessor("org.projectlombok:lombok:${verLombok}")
    testImplementation("org.projectlombok:lombok:${verLombok}")
    testAnnotationProcessor("org.projectlombok:lombok:${verLombok}")
}

tasks.withType(Test).configureEach {
    enabled = false
}